package eccrm.base.employee.service.impl;

import com.ycrl.core.beans.BeanWrapBuilder;
import com.ycrl.core.beans.BeanWrapCallback;
import com.ycrl.core.pager.PageVo;
import com.ycrl.utils.string.StringUtils;
import eccrm.base.employee.bo.EmployeeBo;
import eccrm.base.employee.dao.EmployeeDao;
import eccrm.base.employee.domain.Employee;
import eccrm.base.employee.service.ContactType;
import eccrm.base.employee.service.EmployeeOrgRelService;
import eccrm.base.employee.service.EmployeeService;
import eccrm.base.employee.vo.EmployeeVo;
import eccrm.base.parameter.service.ParameterContainer;
import eccrm.base.position.dao.PositionDao;
import eccrm.base.position.dao.PositionEmpDao;
import eccrm.base.position.domain.PositionEmp;
import eccrm.base.position.service.PositionEmpService;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import javax.annotation.Resource;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

/**
 * Generated by yanhx on 2014-10-13.
 */

@Service("employeeServices")
public class EmployeeServiceImpl implements EmployeeService, BeanWrapCallback<Employee, EmployeeVo> {
    @Resource
    private EmployeeDao employeesDao;
    @Resource
    private PositionEmpDao positionEmpDao;
    @Resource
    private EmployeeOrgRelService employeeOrgRelService;
    @Resource
    private PositionEmpService positionEmpService;
    @Resource
    private PositionDao positionDao;

    @Override
    public String save(Employee employee) {

        // 设置年龄
        setAge(employee);

        String id = employeesDao.save(employee);
        // 保存关联关系
        String positionId = employee.getPositionId();
        String orgId = employee.getOrgId();
        if (!StringUtils.hasEmpty(positionId, orgId)) {
            PositionEmp pe = new PositionEmp();
            pe.setPositionId(positionId);
            pe.setOrgId(orgId);
            pe.setEmpId(id);
            positionEmpDao.save(pe);
        }
        return id;
    }

    private void setAge(Employee employee) {
        Date date = null;
        if (StringUtils.isNotEmpty(employee.getIdNo())) {
            Assert.isTrue(employee.getIdNo().length() == 18, "错误的身份证号码!身份证号码的长度必须是18位!");
            String birthdayStr = employee.getIdNo().substring(6, 14);
            try {
                date = new SimpleDateFormat("yyyyMMdd").parse(birthdayStr);
            } catch (ParseException e) {
                e.printStackTrace();
            }
        } else if (employee.getBirthday() != null) {
            date = employee.getBirthday();
        }
        if (date != null) {
            employee.setBirthday(date);
            int age = Integer.parseInt((System.currentTimeMillis() - date.getTime()) / (1000 * 60 * 60 * 24 * 365l) + "");
            if ("TY".equals(employee.getPositionCode())) {
                Assert.isTrue(age > 11 && age < 29, "年龄超出范围!");
            }
            employee.setAge(age);
        }

    }

    @Override
    public void update(Employee employee) {
        // 设置年龄
        setAge(employee);

        // 保存关联关系
        String positionId = employee.getPositionId();
        String orgId = employee.getOrgId();
        if (!StringUtils.hasEmpty(positionId, orgId)) {
            boolean exists = positionEmpDao.exists(orgId, positionId, employee.getId());
            if (!exists) {
                PositionEmp pe = new PositionEmp();
                pe.setPositionId(positionId);
                pe.setOrgId(orgId);
                pe.setEmpId(employee.getId());
                positionEmpDao.save(pe);
            }
        }
        employeesDao.update(employee);
    }

    @Override
    public PageVo query(EmployeeBo bo) {
        PageVo vo = new PageVo();
        Long total = employeesDao.getTotal(bo);
        vo.setTotal(total);
        if (total == 0) return vo;
        List<Employee> employees = employeesDao.query(bo);
        vo.setData(BeanWrapBuilder.newInstance().setCallback(this).wrapList(employees, EmployeeVo.class));
        return vo;
    }

    @Override
    public PageVo queryValid(EmployeeBo bo) {
        PageVo vo = new PageVo();
        if (bo == null) {
            bo = new EmployeeBo();
        }
        bo.setValid(true);
        Long total = employeesDao.getTotal(bo);
        vo.setTotal(total);
        if (total == 0) return vo;
        List<Employee> employees = employeesDao.query(bo);
        vo.setData(BeanWrapBuilder.newInstance().setCallback(this).wrapList(employees, EmployeeVo.class));
        return vo;
    }

    @Override
    public EmployeeVo findById(String id) {
        return BeanWrapBuilder.newInstance().setCallback(this)
                .wrap(employeesDao.findById(id), EmployeeVo.class);
    }


    @Override
    public List<Employee> queryByOrgId(String id) {
        List<Employee> employeeList = employeeOrgRelService.findByOrgId(id);
        return employeeList;
    }

    @Override
    public List<EmployeeVo> queryByRuleId(String id, String orgId) {
        List<EmployeeVo> employeeList = positionEmpService.findByEmployee(id, orgId);
        return employeeList;
    }

    @Override
    public void deleteByIds(String... ids) {
        if (ids == null || ids.length == 0) return;
        for (String id : ids) {
            employeesDao.deleteById(id);
        }
    }


    @Override
    public void doCallback(Employee employee, EmployeeVo vo) {
        ParameterContainer parameterContainer = ParameterContainer.getInstance();
        // 职务
        vo.setDutyName(parameterContainer.getBusinessName(ContactType.BP_ZHIW, vo.getDuty()));
        // 工作类型
        vo.setWorkTypeName(parameterContainer.getBusinessName(ContactType.BP_EMPTYPE, vo.getWorkType()));
        // 状态
        vo.setStatusName(parameterContainer.getSystemName(ContactType.CONT_TYPE_STATUS, vo.getStatus()));
        // 性别
        vo.setGenderName(parameterContainer.getBusinessName("BP_SEX", employee.getGender()));
        // 民族
        vo.setNationName(parameterContainer.getBusinessName("BP_NATION", employee.getNation()));
        // 政治面貌
        vo.setZzmmName(parameterContainer.getBusinessName("BP_ZZMM", employee.getZzmm()));
        // 领域
        vo.setLyName(parameterContainer.getBusinessName("SPEC_LY", employee.getLy()));
        // 荣誉称号
        vo.setHonorName(parameterContainer.getBusinessName("SPEC_HONOR", employee.getHonor()));

    }

    @Override
    public boolean isExists(String rtxId) {
        return employeesDao.isExists(rtxId);
    }

    @Override
    public String findNameById(String employeeId) {
        return employeesDao.findNameById(employeeId);
    }

    @Override
    public Employee findById2(String employID) {
        return employeesDao.findById(employID);
    }


    @Override
    public PageVo permissionPageQuery(EmployeeBo bo) {
        if (bo == null) {
            bo = new EmployeeBo();
        }
        bo.setPermission(true);
        return query(bo);
    }

}
